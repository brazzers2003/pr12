import java.io.*;  
import java.util.Scanner;  

class Character implements Serializable {  
    private String name;  
    private int energyLevel;  
    private int hungerLevel;  
    transient String status;  // not serialized  

    public Character(String name, int energyLevel, int hungerLevel) {  
        this.name = name;  
        this.energyLevel = energyLevel;   
        this.hungerLevel = hungerLevel;   
        this.status = "energetic";  
    }  

    public void eat(String food) {  
        if (food.equals("apple")) {  
            energyLevel += 10;  
            hungerLevel -= 5;  
        } else if (food.equals("sandwich")) {  
            energyLevel += 25;  
            hungerLevel -= 10;  
        }  
        updateStatus();  
    }  

    public void train(String exercise) {  
        if (exercise.equals("running")) {  
            energyLevel -= 30;  
            hungerLevel += 20;  
        } else if (exercise.equals("push-ups")) {  
            energyLevel -= 15;  
            hungerLevel += 10;  
        }  
        updateStatus();  
    }  

    public void rest(int hours) {  
        energyLevel += hours * 10; // +10 energy for each hour of rest  
        updateStatus();  
    }  

    private void updateStatus() {  
        if (energyLevel > 60 && hungerLevel < 30) {  
            status = "energetic";  
        } else if (energyLevel < 30) {  
            status = "tired";  
        } else {  
            status = "hungry";  
        }  
    }  

    public static void saveCharacter(Character character, String filePath) {  
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filePath))) {  
            oos.writeObject(character);  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }  

    public static Character loadCharacter(String filePath) {  
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filePath))) {  
            return (Character) ois.readObject();  
        } catch (IOException | ClassNotFoundException e) {  
            e.printStackTrace();  
            return null;  
        }  
    }  

    @Override  
    public String toString() {  
        return "Character{name='" + name + "', energyLevel=" + energyLevel + ", hungerLevel=" + hungerLevel + ", status='" + status + "'}";  
    }  

    public static void main(String[] args) {  
        String filePath = "character.ser";  
        Character character;  

        // Character name  
        String characterName = "Jon";  

        // Scanner for user input  
        Scanner scanner = new Scanner(System.in);  

        // Check if file exists  
        File file = new File(filePath);  
        if (file.exists()) {  
            // Deserialization  
            character = loadCharacter(filePath);  
            System.out.println("Loaded character: " + character);  

            // Perform actions  
            character.rest(2);  
            character.eat("apple");  
            character.train("running");  
        } else {  
            // Input for initial energy and hunger levels  
            System.out.print("Enter initial energy level (0-100): ");  
            int initialEnergy = scanner.nextInt();  
            System.out.print("Enter initial hunger level (0-100): ");  
            int initialHunger = scanner.nextInt();  

            // Create a new character with specified name, energy, and hunger levels  
            character = new Character(characterName, initialEnergy, initialHunger);  
            System.out.println("New character: " + character);  

            // Perform actions  
            character.eat("sandwich");  
            character.train("push-ups");  
            character.eat("apple");  
            character.rest(3);  
            character.train("running");  
        }  

        // Print final character state  
        System.out.println("Final character state: " + character);  

        // Serialization  
        saveCharacter(character, filePath);  
        
        // Close scanner  
        scanner.close();  
    }  
}
